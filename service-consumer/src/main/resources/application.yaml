server:
  port: 8210
spring:
  application:
    name: service-consumer
  cloud:
    nacos:
      discovery:
        server-addr: 127.0.0.1:8848
    #默认nacos 使用ribbon，禁用ribbon..使用LB
    loadbalancer:
      ribbon:
        enabled: false
  datasource:
    #mysql
    #具体参见类DynamicDataSourceAspect 说明
    #不用此默认，默认就是写库,多数据源用jdbcUrl，不是url,spring 默认用的是url，用多数据源用url会报错。
    url: jdbc:mysql://127.0.0.1:3306/demo?useUnicode=true&characterEncoding=utf8&useSSL=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&allowMultiQueries=true&rewriteBatchedStatements=true
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: root
    password: 123456

    # HikariCP： springboot2.0 默认的连接池。https://github.com/brettwooldridge/HikariCP
    #HikariCP  高并发性能优。mysql 8h 空闲断开连接可用quartz 调度定期select 1  。
    #产生此问题DB工作就不繁忙，性能要求不高。可以用上面dbcp2的配置，采取空闲查询策略。
    #要引入mybatis
    type: com.zaxxer.hikari.HikariDataSource
    # Hikari will use the above plus the following to setup connection pooling
    hikari:
      minimum-idle: 5
      maximum-pool-size: 100
      auto-commit: true #OrderManagerService 代码异常，spring自动回滚，或者手动回滚。否则正常自动提交
      idle-timeout: 60000
      #pool-name: HikariCP-Demo
      max-lifetime: 1800000
      connection-timeout: 600000
      #connection-test-query: SELECT 1

  redis:
    ##单机
    #  数据库索引
    database: 0

    #    单机
    # 远程服务器地址
    host: 127.0.0.1
    # 远程服务器端口
    port: 6379


    #    #配置集群，自动写入集群
    #    ##集群 注意：密码用上面密码配置 127.0.0.1:7001,127.0.0.1:7002,127.0.0.1:7003,127.0.0.1:7004,127.0.0.1:7005,127.0.0.1:7006 #集群节点
    #    cluster:
    #      nodes:
    #        - 127.0.0.1:7000
    #        - 127.0.0.1:7001
    #        - 127.0.0.1:7002
    #        - 127.0.0.1:7003
    #        - 127.0.0.1:7004
    #        - 127.0.0.1:7005
    #      max-redirects: 3


    # 集群配置也用此处写正确的密码
    password: fancky123456
    # 链接超时时间（毫秒）
    timeout: 30000

    #redis连接池 lettuce、jedis。连接池 单机配置。默认集成lettuce
    #    jedis:
    lettuce:
      pool:
        # 最大空闲连接
        max-idle: 64
        # 最小空闲链接
        min-idle: 0
        # 最大连接数（负数表示没有限制）
        max-active: 64
        # 最大阻塞等待时间（负数表示没有限制）
        max-wait: 0


    #    ##集群 注意：密码用上面密码配置
    #    cluster:
    #      nodes:
    #        - 127.0.0.1:7000
    #        - 127.0.0.1:7001
    #        - 127.0.0.1:7002
    #        - 127.0.0.1:7003
    #        - 127.0.0.1:7004
    #      max-redirects: 3

    #    ##哨兵 密码用上面密码配置
    #    sentinel:
    #      master: mymaster
    #      nodes:
    #        - 127.0.0.1:60001
    #        - 127.0.0.1:60002
    #        - 127.0.0.1:60003


    #springboot 配置未成功，参见代码的配置
    redisson:
      file: classpath:redisson-config.yml

#springboot 监控 Actuator
management:
  endpoints:
    web:
      exposure:
        include: '*'

service:
  provider-one: service-provider-one

config:
  appName: product_test

feign:
  # 设置 feign 超时时间:超时报异常，设置熔断则进入熔断处理逻辑
  client:
    config:
      # default、service-provider-two设置的全局超时时间，指定服务名称可以设置单个服务的超时时间
      default:
        #优先熔断时间，后feign配置时间；,开启熔断就不要设置超时时间
        connectTimeout: 10000
        readTimeout: 10000
  httpclient:
    connection-timeout: 5000  #单位ms,默认2000
    max-connections: 200 #线程池最大连接数
    enabled: false
  okhttp: #用okhttp 代替默认的Client，JDK 原生的 URLConnection 发送HTTP请求，没有连接池
    enabled: true
  #引入 resilience4j ：配置超时熔断回调。开启熔断，默认超时时间1秒，
    # 旧 hystrix开启熔断 hystrix 默认情况下feign是没有开启hystrix
  # 旧 hystrix  新版本 circuitbreaker
  circuitbreaker:
    enabled: true
#  sentinel:
#    enabled: true


resilience4j:
  timelimiter:
    configs:
      default:
        timeout-duration: 5s # 默认1s 超过1s直接降级、熔断
  circuitbreaker:
    configs:
      default:
        failure-rate-threshold: 50 # 调用失败达到50%后打开断路器
        slow-call-duration-threshold: 2s # 慢调用时间阈值
        slow-call-rate-threshold: 30 # 慢调用百分比峰值
        sliding-window-type: time_based # 滑动窗口类型
        sliding-window-size: 2 # 滑动窗口大小 count_based6个请求 time_base6秒
        minimum-number-of-calls: 2 # 每个滑动窗口的周期
        automatic-transition-from-open-to-half-open-enabled: true # 开始过度到半开状态
        wait-duration-in-open-state: 5s # 从开启到半开启需要5s
        permitted-number-of-calls-in-half-open-state: 2 #半开状态允许通过的最大请求数
        record-exceptions:
          - java.lang.Exception
    instances:
      cloud-payment-service:
        base-config: default



# 熔断机制
 # Hystrix 已不再维护 ，默认超时时间是1秒
#hystrix:
#  shareSecurityContext: true
#  command:
#    default:
##      metrics:
###          窗口期:默认10s: timeInMilliseconds内请求requestVolumeThreshold 次数之后达到errorThresholdPercentage 就不会调用幅度
#           # 超过 sleepWindowInMilliseconds 时间才会调用服务
##          timeInMilliseconds: 10000
#      execution:
#        isolation:
#          thread:
#            #调用者的超时时间，单位ms。超时进入熔断，
#            timeoutInMilliseconds: 1000
#      circuitBreaker:
##        forceClosed: true
#        #默认20 当在配置时间窗口内达到此数量后，才会根据其他条件进行短路
#        requestVolumeThreshold: 20
#        #出错百分比阈值，当达到此阈值后，开始短路。默认50%）直接返回，
#        errorThresholdPercentage: 50%
#        #        在此值的时间内，hystrix会拒绝新的请求，只有过了这个时间，断路器会进入半开状态。
#        #        即：熔断多少秒后去尝试请求。
#        #短路多久以后开始尝试是否恢复，单位ms，默认5s
#        sleepWindowInMilliseconds: 5000

#ribbon:
#  ReadTimeout: 5000 #处理请求的超时时间，默认为1秒
#  ConnectTimeout: 5000 #接建立的超时时长，默认1秒
logging:
  config: classpath:log4j2.xml


