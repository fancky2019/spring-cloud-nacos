##指定本服务的端口号，默认8080
#server:
#  port: 8201
#spring:
#  application:
#    name: nacos-springgateway
#  datasource:
#    #mysql
#    #具体参见类DynamicDataSourceAspect 说明
#    #不用此默认，默认就是写库,多数据源用jdbcUrl，不是url,spring 默认用的是url，用多数据源用url会报错。
#    url: jdbc:mysql://127.0.0.1:3306/demo?useUnicode=true&characterEncoding=utf8&useSSL=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&allowMultiQueries=true&rewriteBatchedStatements=true
#    driver-class-name: com.mysql.cj.jdbc.Driver
#    username: root
#    password: 123456
#
#    # HikariCP： springboot2.0 默认的连接池。https://github.com/brettwooldridge/HikariCP
#    #HikariCP  高并发性能优。mysql 8h 空闲断开连接可用quartz 调度定期select 1  。
#    #产生此问题DB工作就不繁忙，性能要求不高。可以用上面dbcp2的配置，采取空闲查询策略。
#    #要引入mybatis
#    type: com.zaxxer.hikari.HikariDataSource
#    # Hikari will use the above plus the following to setup connection pooling
#    hikari:
#      minimum-idle: 5
#      maximum-pool-size: 100
#      auto-commit: true #OrderManagerService 代码异常，spring自动回滚，或者手动回滚。否则正常自动提交
#      idle-timeout: 60000
#      #pool-name: HikariCP-Demo
#      max-lifetime: 1800000
#      connection-timeout: 600000
#      #connection-test-query: SELECT 1
#  redis:
#    #  数据库索引
#    database: 3
#    # 远程服务器地址
#    host: 127.0.0.1
#    # 远程服务器端口
#    port: 6379
#    # 验证码
#    password: fancky123456
#    # 链接超时时间（毫秒）
#    jedis:
#      pool:
#        # 最大空闲连接
#        max-idle: 8
#        # 最小空闲链接
#        min-idle: 0
#        # 最大连接数（负数表示没有限制）
#        max-active: 8
#        # 最大阻塞等待时间（负数表示没有限制）
#        max-wait: 0
#    # 链接超时时间（毫秒）
#    timeout: 2000
#
#  # sleuth进行日志链路跟踪traceId
#  sleuth:
#    reactor:
#      #在2020.0.0中，已将默认网关反应器检测模式更改为manual,
#      #ON_EACH-用跟踪表示形式包装每个Reactor运算符。在大多数情况下，传递跟踪上下文。此模式可能会导致性能急剧下降。
#      #ON_LAST-将最后一个Reactor运算符包装在跟踪表示中。在某些情况下传递跟踪上下文，
#      #因此访问MDC上下文可能不起作用。此模式可能会导致中等性能下降。
#      #MANUAL-以最小侵入性的方式包装每个Reactor，而无需通过跟踪上下文。由用户决定
#      instrumentation-type: decorate_on_each
#
#  cloud:
#    nacos:
#      discovery:
#        server-addr: 127.0.0.1:8848
#
#    gateway:
#      # default-filters:
#      discovery: #是否与服务发现组件进行结合，通过 serviceId(必须设置成大写) 转发到具体的服务实例。默认为false，设为true便开启通过服务中心的自动根据 serviceId 创建路由的功能。
#        locator: #路由访问方式：http://Gateway_HOST:Gateway_PORT/大写的serviceId/**，其中微服务应用名默认大写访问。
#          #http://localhost:8080/gateway/user?name=a
#          enabled: true #开启从注册中心动态创建路由的功能，利用微服务名进行路由
#          # 将请求路径上的服务名配置为小写（因为服务注册的时候，向注册中心注册时将服务名转成大写的了）如：server-->注册中心SERVER
#          lowerCaseServiceId: true
#      routes:
#         #所有的微服务都要配置路由转发，否则转发找不到报404
#        #id 名字不能一样，服务集群可以用相同的服务名称，一个路由id
#        - id: service-consumer
#          # 是否会经过负载均衡，是通过判断uri的schema的，如果是以lb开头，则会开启负载均衡
#          # lb代表会经过负载均衡，从注册中心获取服务，SERVER:为注册中心的服务名称
#          #会用自带的负载均衡：http://localhost:8080/gateway1/user?name=a
#          # 客户端负载均衡实现：两个微服务注册到注册中心的名称一样，ip和端口不一样
#          uri: lb://service-consumer
#          predicates:
#            #路径要对应，区分大小写
#            - Path=/gateway/**
#          filters:
#            #从/gateway/**开始转发跳过的目录数，StripPrefix=1跳过/gateway/
#            - StripPrefix=1
#            # RedisRateLimter RequestRateLimiter
#            - name: RequestRateLimiter
#              args:
#                # 先启动Redis不停刷新连接  报错：HTTP ERROR 429（too many request），证明成功
#                # 允许用户每秒处理多少个请求 10
#                redis-rate-limiter.replenishRate: 1
#                # 令牌桶的容量，允许在一秒钟内完成的最大请求数 20
#                redis-rate-limiter.burstCapacity: 2
#                # 使用（Spring Expression Language）按名称引用bean，在配置文件中定义的名称 "#{@ipKeyResolver}"
#                #令牌桶容量大于请求数，可以储存额外的数量用于临时激增请求，大于桶拒绝429错误
#                key-resolver: "#{@pathKeyResolver}"
#            #熔断过滤器,如果timeoutInMilliseconds配置的时间内没有回复，则会重定向到fallbackUri
#            - name: CircuitBreaker
#              args:
#                name: myCircuitBreaker
#                fallbackUri: forward:/servercallback/defaultfallback
#
#        - id: service-provider-one
#          # 是否会经过负载均衡，是通过判断uri的schema的，如果是以lb开头，则会开启负载均衡
#          # lb代表会经过负载均衡，从注册中心获取服务，SERVER:为注册中心的服务名称
#          #会用自带的负载均衡：http://localhost:8080/gateway1/user?name=a
#          # 客户端负载均衡实现：两个微服务注册到注册中心的名称一样，ip和端口不一样
#          uri: lb://service-provider-one
#          predicates:
#            #路径要对应，区分大小写
#            - Path=/service-one/**
#          filters:
#            #从/gateway/**开始转发跳过的目录数，StripPrefix=1跳过/gateway/
#            - StripPrefix=1
#            # RedisRateLimter RequestRateLimiter
#            - name: RequestRateLimiter
#              args:
#                # 先启动Redis不停刷新连接  报错：HTTP ERROR 429（too many request），证明成功
#                # 允许用户每秒处理多少个请求 10
#                redis-rate-limiter.replenishRate: 1
#                # 令牌桶的容量，允许在一秒钟内完成的最大请求数 20
#                redis-rate-limiter.burstCapacity: 2
#                # 使用（Spring Expression Language）按名称引用bean，在配置文件中定义的名称 "#{@ipKeyResolver}"
#                #令牌桶容量大于请求数，可以储存额外的数量用于临时激增请求，大于桶拒绝429错误
#                key-resolver: "#{@pathKeyResolver}"
#            #熔断过滤器,如果timeoutInMilliseconds配置的时间内没有回复，则会重定向到fallbackUri
#            - name: CircuitBreaker
#              args:
#                name: myCircuitBreaker
#                fallbackUri: forward:/servercallback/defaultfallback
#
#        - id: service-provider-two
#          # 是否会经过负载均衡，是通过判断uri的schema的，如果是以lb开头，则会开启负载均衡
#          # lb代表会经过负载均衡，从注册中心获取服务，SERVER:为注册中心的服务名称
#          #会用自带的负载均衡：http://localhost:8080/gateway1/user?name=a
#          # 客户端负载均衡实现：两个微服务注册到注册中心的名称一样，ip和端口不一样
#          uri: lb://service-provider-two
#          predicates:
#            #路径要对应，区分大小写
#            - Path=/service-two/**
#          filters:
#            #从/gateway/**开始转发跳过的目录数，StripPrefix=1跳过/gateway/
#            - StripPrefix=1
#            # RedisRateLimter RequestRateLimiter
#            - name: RequestRateLimiter
#              args:
#                # 先启动Redis不停刷新连接  报错：HTTP ERROR 429（too many request），证明成功
#                # 允许用户每秒处理多少个请求 10
#                redis-rate-limiter.replenishRate: 1
#                # 令牌桶的容量，允许在一秒钟内完成的最大请求数 20
#                redis-rate-limiter.burstCapacity: 2
#                # 使用（Spring Expression Language）按名称引用bean，在配置文件中定义的名称 "#{@ipKeyResolver}"
#                #令牌桶容量大于请求数，可以储存额外的数量用于临时激增请求，大于桶拒绝429错误
#                key-resolver: "#{@pathKeyResolver}"
#            #熔断过滤器,如果timeoutInMilliseconds配置的时间内没有回复，则会重定向到fallbackUri
#            - name: CircuitBreaker
#              args:
#                name: myCircuitBreaker
#                fallbackUri: forward:/servercallback/defaultfallback
#
##        - id: SPRINGBOOTPROJECT
##          # lb代表从注册中心获取服务，SERVER:为注册中心的服务名称
##          #会用自带的负载均衡
##          uri: lb://SPRINGBOOTPROJECT
##          predicates:
##            #路径要对应，区分大小写
##            # 前端先访问网关，网关路由转发请求后端的微服务。
##            # 访问网关URL: url: "http://localhost:8080/gateway/springBootProject/jwt/authorise",//url填写的是请求的路径
##            #微服务URL:http://localhost:8080/jwt/authorise。此处配置StripPrefix=2 跳过/gateway/springBootProject
##            - Path=/gateway/springBootProject/**
##          filters:
##            #从/gateway/springBootProject/**开始转发跳过的目录数，StripPrefix=2跳过两层目录：/gateway/springBootProject/
##            # 如：http://localhost:8080/gateway/springBootProject/feignclient/testParam?name=fanckyTest1
##            #StripPrefix=2  跳过2层目录之后之后变成http://localhost:8080/feignclient/testParam?name=fanckyTest1
##            #直接访问http://localhost:8080/feignclient/testParam?name=fanckyTest1
##            - StripPrefix=2
##            # RedisRateLimter RequestRateLimiter
##            - name: RequestRateLimiter
##              args:
##                # 先启动Redis不停刷新连接  报错：HTTP ERROR 429（too many request），证明成功
##                # 允许用户每秒处理多少个请求 5
##                redis-rate-limiter.replenishRate: 5
##                # 令牌桶的容量，允许在一秒钟内完成的最大请求数 10
##                redis-rate-limiter.burstCapacity: 10
##                # 使用SpEL（Spring Expression Language）表达式按名称引用bean，在配置文件中定义的名称
##                key-resolver: "#{@ipKeyResolver}"
##            #熔断过滤器,如果timeoutInMilliseconds配置的时间内没有回复，则会重定向到fallbackUri
##            - name: Hystrix
##              args:
##                name: fallbackcmd
##                fallbackUri: forward:/servercallback/springbootproject
#
##springboot 监控 Actuator
#management:
#  endpoints:
#    web:
#      exposure:
#        include: '*'
#
##注意：服务中心和提供的服务都要启动
##打开链接测试，不停刷新会发现负载均衡
##http://localhost:8201/gateway/test/helloWorld?hello=test
#
#demo:
#  JWTSecretKey: GQDstcKsx0NHjPOuXOYg5MbeJ1XT0uFiwDVvVBrk
#
#logging:
#  level:
#    org.springframework.cloud: trace